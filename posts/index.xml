<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Exploring code</title>
    <link>https://hdyson.github.io/posts/</link>
    <description>Recent content in Posts on Exploring code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Apr 2021 20:55:35 +0100</lastBuildDate><atom:link href="https://hdyson.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Exploring Python Ligatures</title>
      <link>https://hdyson.github.io/posts/exploring-python-ligatures/</link>
      <pubDate>Wed, 07 Apr 2021 20:55:35 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/exploring-python-ligatures/</guid>
      <description>&lt;p&gt;
Pycharm has some pretty ligature support.  It&amp;#39;d be good to have similar in
emacs - let&amp;#39;s take a look at how to set that up.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Selecting which python to use with org-babel</title>
      <link>https://hdyson.github.io/posts/org-babel-conda/</link>
      <pubDate>Sun, 07 Jun 2020 20:56:00 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/org-babel-conda/</guid>
      <description>&lt;p&gt;
When working with &lt;a href=&#34;https://orgmode.org/worg/org-contrib/babel/intro.html&#34;&gt;org-babel&lt;/a&gt;, it&amp;#39;s useful to be able to select from which
environment python is run.  There&amp;#39;s the obvious brute-force approach -
activating the appropriate environment before launching emacs - but quitting
and restarting emacs is a lot of hassle if you need to change the environment
in a running emacs.  Besides, I&amp;#39;m a big advocate of launching emacs on
startup, and only exiting it when you shutdown your computer.  So here, I&amp;#39;ll
show how to choose the python being run within org-babel.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating post deployment</title>
      <link>https://hdyson.github.io/posts/automating-post-deployment/</link>
      <pubDate>Sun, 09 Feb 2020 14:33:05 +0000</pubDate>
      
      <guid>https://hdyson.github.io/posts/automating-post-deployment/</guid>
      <description>&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-1&#34;&gt;
The problem
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;
Publishing posts via hugo is slightly more manual than I&amp;#39;d like.  The trigger
for this post was &amp;#34;Can we automate this with &lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github actions&lt;/a&gt;?&amp;#34;, but it turns
out the solution was much simpler.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Post links</title>
      <link>https://hdyson.github.io/posts/post-links/</link>
      <pubDate>Thu, 30 Jan 2020 22:09:50 +0000</pubDate>
      
      <guid>https://hdyson.github.io/posts/post-links/</guid>
      <description>&lt;p&gt;
It&amp;#39;s not obvious (to me, anyway) how to use &lt;a href=&#34;https://gohugo.io/content-management/cross-references/&#34;&gt;hugo cross-reference links&lt;/a&gt; with
org-mode format posts.  This very short post gives an example of how to do so.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Comment setup</title>
      <link>https://hdyson.github.io/posts/comment-setup/</link>
      <pubDate>Sun, 10 Nov 2019 20:02:48 +0000</pubDate>
      
      <guid>https://hdyson.github.io/posts/comment-setup/</guid>
      <description>&lt;p&gt;
Now to add some comments to this blog.  &lt;a href=&#34;https://utteranc.es&#34;&gt;Utterances&lt;/a&gt; looks promising.  It uses github issue comments to provide the commenting infrastructure, so should be easy to setup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deploying to Github Pages</title>
      <link>https://hdyson.github.io/posts/deploying-to-github-pages/</link>
      <pubDate>Sun, 27 Oct 2019 19:52:03 +0000</pubDate>
      
      <guid>https://hdyson.github.io/posts/deploying-to-github-pages/</guid>
      <description>&lt;p&gt;
A quick summary of deploying this Hugo generated site to &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github pages&lt;/a&gt; (and hence &lt;a href=&#34;https://hdyson.dev&#34;&gt;hdyson.dev&lt;/a&gt;) via the instructions from the &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;Hugo docs&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making init files intelligible</title>
      <link>https://hdyson.github.io/posts/making-init-files-intelligible/</link>
      <pubDate>Tue, 15 Oct 2019 20:53:56 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/making-init-files-intelligible/</guid>
      <description>&lt;p&gt;
One of the issues with an editor as configurable as emacs is that an emacs
.init.el file ends up an unmaintanable mess of barely understood code
snippets, duplicate and contradictory settings, and a treasure trove of
forgotten knowledge.&lt;/p&gt;
&lt;p&gt;
We can do better.&lt;/p&gt;
&lt;p&gt;
So in this post I&amp;#39;ll show you how to have a documented, human-readable emacs
configuration file.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Complete emacs setup</title>
      <link>https://hdyson.github.io/posts/complete-emacs-setup/</link>
      <pubDate>Tue, 15 Oct 2019 20:34:49 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/complete-emacs-setup/</guid>
      <description>&lt;p&gt;
Following on from &lt;a href=&#34;https://boingboing.net/2016/09/30/finally-got-my-emacs-setup-jus.html&#34;&gt;Boing Boing&lt;/a&gt;, I finally got my emacs setup just how I like
it:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Theme setup</title>
      <link>https://hdyson.github.io/posts/theme-setup/</link>
      <pubDate>Sun, 13 Oct 2019 20:47:12 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/theme-setup/</guid>
      <description>&lt;p&gt;
I like the look of the &lt;a href=&#34;https://themes.gohugo.io/beautifulhugo/&#34;&gt;Beautiful Hugo&lt;/a&gt; theme, so let&amp;#39;s see how easy it is to setup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo setup in org format</title>
      <link>https://hdyson.github.io/posts/hugo-setup/</link>
      <pubDate>Sat, 12 Oct 2019 17:05:21 +0100</pubDate>
      
      <guid>https://hdyson.github.io/posts/hugo-setup/</guid>
      <description>&lt;p&gt;
Exploring using &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; as a static site generator, partially because it supports
&lt;a href=&#34;https://orgmode.org&#34;&gt;org-mode&lt;/a&gt;, and partially because there&amp;#39;s some additional widgets for hugo that
I&amp;#39;d like to explore.  Below are the steps followed to create this post:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
